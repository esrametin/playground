<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en" prefix="dc: http://purl.org/dc/elements/1.1/">
<head><meta name="author" content="Created with Quandary by Half-Baked Software, registered to Esra."/><meta name="keywords" content="Quandary, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"/>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

<!-- This is the core XHTML code which is used to build the exercise page. -->

<meta name="dc:creator" content="Esra" />
<meta name="dc:title" content="Lesson 4 - GAME!" />


<title>
Lesson 4 - GAME!
</title>

<!-- Made with executable version 3.0 Release 0 Build 5 -->

<style>


/* This is the CSS stylesheet used in the exercise. */
/* Elements in square brackets are replaced by data based on configuration settings when the exercise is built. */

/* Made with executable version 3.0 Release 0 Build 5 */

/* CSS variables for colours. */
:root{
	--strFontFace:       Geneva,Arial,sans-serif;
	--strFontSize:       medium;
	--strTextColor:      #000000;
	--strTitleColor:     #000000;

	--strFuncLightColor: #ffffff;
	--strFuncShadeColor: #7f7f7f;
	--strLinkColor:      #0000cc;
	--strVLinkColor:     #0000ff;
	
	--strNavBarColor:    #bfbfff;
	--strNavLightColor:  #dfdfff;
	--strNavShadeColor:  #5f5f7f;
	--strNavTextColor:   #000000;
	
	--strPageBGColor:    #ececff;
	--strExBGColor:      #ffffff;
}

body{
	font-family: var(--strFontFace);
	background-color: var(--strPageBGColor);
	color: var(--strTextColor);
 
	margin-right: 5%;
	margin-left: 5%;
	font-size: var(--stFontSize);
}

p{
	text-align: left;
	margin: 0px;
}

div,span,td{
	color: var(--strTextColor);
}

div.Titles{
	padding: 0.5em;
	text-align: center;
	color: var(--strTitleColor);
}

button{
	display: inline;
	font-size: 100%; /* Required to make IE scale button caption text size! */
}

.ExerciseTitle{
	font-size: 140%;
	color: var(--strTitleColor);
}

div#Timer{
	padding: 0.3em;
	margin-left: auto;
	margin-right: auto;
	text-align: center;
}

span#TimerText{
	padding: 0.3em;
	border-width: 1px;
	border-style: solid;
	font-weight: bold;
	display: none;
}

div.ControlButtons{
	text-align: center;
}

.Instructions{
	margin-top: 1em;
}

.DecisionPointTitle{

}

.DecisionPointText{
	text-align: left;
	margin: auto;
}

td#AssetDisplay{
	display: none;
}

div.Assets{
	margin: 20px;
}

table.AssetTable{
	border-width: 3px;
	border-style: double;
	border-color: var(--strTextColor);
	padding: 0.3em;
}

table.AssetTable th{
	background-color: var(--strTextColor);
	color: var(--strExBGColor);
	padding: 0.3em;
}

div.LinkList{
	margin-top: 10px;
}

table.LinkTable{
	margin-left: auto;
	margin-right: auto;
	text-align: left;
}

.FeedbackText{
	color: var(--strTitleColor);
}

table.DPTable{
	margin-left: auto;
	margin-right: auto;
	border-width: 0px;
	padding: 10px;
	vertical-align: top;
}

div.Feedback {
	background-color: var(--strPageBGColor);
	left: 33%;
	width: 34%;
	top: 33%;
	z-index: 1;
	border-style: solid;
	border-width: 1px;
	padding: 5px;
	text-align: center;
	color: var(--strTitleColor);
	position: absolute;
	display: none;
}

div.DecisionPoint{
	background-color: var(--strExBGColor);
	text-align: center;
	color: var(--strTextColor);
	padding: 0.5em;
	border-style: solid;
	border-width: 1px 1px 1px 1px;
	border-color: var(--strTextColor);
	margin: 1px;
}

.FuncButton {
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 3em;

	border-left-color: var(--strFuncLightColor);
	border-top-color: var(--strFuncLightColor);
	border-right-color: var(--strFuncShadeColor);
	border-bottom-color: var(--strFuncShadeColor);
	color: var(--strTextColor);
	background-color: var(--strExBGColor);

	border-width: 1pt;
	cursor: pointer;	
	box-shadow: 0.2em 0.3em 0.2em var(--strFuncShadeColor);
}

.FuncButton:active {
	box-shadow: none;
}

.FuncButton:hover{
	color: var(--strExBGColor);
	background-color: var(--strTextColor);
}


/*BeginNavBarStyle*/

div.NavButtonBar{
	background-color: var(--strNavBarColor);
	text-align: center;
	margin: 0.25rem 0;
	clear: both;
	font-size: 1rem;
	padding: 0.2rem;
}

.NavButton {
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 3em;
	
	border-left-color: var(--strNavLightColor);
	border-top-color: var(--strNavLightColor);
	border-right-color: var(--strNavShadeColor);
	border-bottom-color: var(--strNavShadeColor); 
	background-color: var(--strNavBarColor);
	color: var(--strNavTextColor);

	border-width: 1pt;
	cursor: pointer;	
	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
}

.NavButton:active {
	box-shadow: none;
}

.NavButton:hover{
	color: var(--strNavBarColor);
	background-color: var(--strNavTextColor);
}

/*EndNavBarStyle*/

a{
	color: var(--strLinkColor);
}

a:visited{
	color: var(--strVLinkColor);
}

a:hover{
	color: var(--strLinkColor);
}


</style>

<!-- The following insertion allows you to add your own code directly to this head tag from the configuration screen -->



<script>

//<![CDATA[

<!--


//CODE FOR HANDLING NAV BUTTONS AND FUNCTION BUTTONS

function FocusAButton(){
	if (document.getElementById('CheckButton1') != null){
		document.getElementById('CheckButton1').focus();
	}
	else{
		if (document.getElementById('CheckButton2') != null){
			document.getElementById('CheckButton2').focus();
		}
		else{
			document.getElementsByTagName('button')[0].focus();
		}
	}
}




//CODE FOR HANDLING DISPLAY OF POPUP FEEDBACK BOX

var topZ = 1000;

function ShowMessage(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
	topZ++;
	FDiv.style.zIndex = topZ;
	FDiv.style.top = TopSettingWithScrollOffset(30) + 'px';

	FDiv.style.display = 'block';

	ShowElements(false, 'input');
	ShowElements(false, 'select');
	ShowElements(false, 'object');
	ShowElements(true, 'object', 'FeedbackContent');

//Focus the OK button
	setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
	
//[inclPreloadImages]
//	RefreshImages();
//[/inclPreloadImages]
}

function ShowElements(Show, TagName, ContainerToReverse){
// added third argument to allow objects in the feedback box to appear
//IE bug -- hide all the form elements that will show through the popup
//FF on Mac bug : doesn't redisplay objects whose visibility is set to visible
//unless the object's display property is changed

	//get container object (by Id passed in, or use document otherwise)
	TopNode = document.getElementById(ContainerToReverse);
	var Els;
	if (TopNode != null) {
		Els = TopNode.getElementsByTagName(TagName);
	} else {
		Els = document.getElementsByTagName(TagName);
	}

	for (var i=0; i<Els.length; i++){
		if (TagName == "object") {
			//manipulate object elements in all browsers
			if (Show == true){
				Els[i].style.visibility = 'visible';
			}
			else{
				Els[i].style.visibility = 'hidden';
			}
		} 
	}
}



function HideFeedback(){
	document.getElementById('FeedbackDiv').style.display = 'none';
	ShowElements(true, 'input');
	ShowElements(true, 'select');
	ShowElements(true, 'object');
}





//This is the JavaScript code needed to make the exercise function

//USING USER-DEFINED STRINGS:
//If you are using the user-defined strings on the Custom tab of the Config screen, 
//make sure the strings are correctly escaped for use in JavaScript.



//CODE FOR ASSETS AND ASSET BASKETS

//ASSETS SECTION
function Asset(ID, Name, InitVal, DecPlace, ShowDuring, ShowEnd, ShowCount, CurrVal, Parent){
	this.ID = ID;
	this.Name=Name;
	this.InitVal=InitVal;
	this.DecPlace=DecPlace;
	this.ShowDuring=ShowDuring;
	this.ShowEnd=ShowEnd;
	this.ShowCount=ShowCount;
	this.CurrVal=CurrVal;
	this.Parent = Parent;
}

function AssetGetCurrValString(){
	var Num = this.CurrVal;
	if (this.DecPlace > 0){
		for (var i=0; i<this.DecPlace; i++){Num /= 10;}
	}
	var Result = Num.toString();
	if (this.DecPlace > 0){
		var DecLoc = Result.indexOf('.');
		if (DecLoc < 0){Result += '.';}
//Add leading zeros if required
		while (((Result.length-1) - Result.indexOf('.'))<this.DecPlace){Result += '0';} 
//Truncate trailing places if required
		while (((Result.length-1) - Result.indexOf('.'))>this.DecPlace){Result = Result.substring(0, Result.length-1);}
	}
	return Result;
}
Asset.prototype.GetCurrValString=AssetGetCurrValString;

function AssetGetCurrValFloat(){
	var Num = this.CurrVal;
	if (this.DecPlace > 0){
		for (var i=0; i<this.DecPlace; i++){Num /= 10;}
	}
		return Num;
}
Asset.prototype.GetCurrValFloat=AssetGetCurrValFloat;

function AssetSetCurrValFromFloat(Num){
	if (this.DecPlace > 0){
		for (var i=0; i<this.DecPlace; i++){Num *= 10;}
	}
	this.CurrVal = Num;
}
Asset.prototype.SetCurrValFromFloat=AssetSetCurrValFromFloat;

function AssetReportCurrState(){
	return this.Name + ': ' + this.GetCurrValString();
}
Asset.prototype.ReportCurrState=AssetReportCurrState;

function AssetMeetsRequirement(ReqType, Req){
	var Result = true;
	switch(ReqType){
		case 0: break;
		case 1: Result = (this.CurrVal > Req); break;
		case 2: Result = (this.CurrVal < Req); break;
		case 3: Result = (this.CurrVal == Req); break;
//New feature for 2.1.1.0: not equal to
		case 4: Result = (this.CurrVal != Req); break;
	}
	return Result;
}
Asset.prototype.MeetsRequirement=AssetMeetsRequirement;

function AssetPerformTransaction(OperatorType, Operand){
	if ((this.Name == '_Timer_Seconds')&&(this.Parent.Active == true)){
		this.CurrVal = Seconds;
	}
	switch(OperatorType){
//Operands coming into this function should already be massaged to be at the same decimal place level as 
//the asset being manipulated; therefore +, -, and = operators can use the values directly, but *, /, % 
//and ^ transactions will have to reduce the operand to its true value by dividing it.
		case 1: this.CurrVal += Operand; break; //add
		case 2: this.CurrVal -= Operand; break; //subtract
		case 3: for (var x=0; x<this.DecPlace; x++){Operand /= 10;}this.CurrVal *= Operand; break; //multiply
		case 4: for (var x=0; x<this.DecPlace; x++){Operand /= 10;}this.CurrVal /= Operand; break; //divide
		case 5: this.CurrVal = Operand; break; //set equal to
		case 6: for (var x=0; x<this.DecPlace; x++){Operand /= 10;}this.CurrVal *= (Operand/100); break; //percentage
//Difficult case (power of); need to change the operand and the value to core values, do the calculation, then
//change the value back
		case 7: 
//Change the operand to core value
			for (var x=0; x<this.DecPlace; x++){Operand /= 10;}
//Change the asset value to core value
			var y = this.CurrVal; for (var x=0; x<this.DecPlace; x++){y /= 10;}
//Do the math
			x = y; for (var j=1; j<Operand; j++){y *= x;} 
//Raise the val again
			for (var x=0; x<this.DecPlace; x++){y *= 10;}
//Set the value
			this.CurrVal = y;
			break; 
	}
	this.CurrVal = Math.round(this.CurrVal);
	if ((this.Name == '_Timer_Seconds')&&(this.Parent.Active == true)){
		Seconds = this.CurrVal;
	}
}
Asset.prototype.PerformTransaction=AssetPerformTransaction;

function AssetCanBeShown(){
	var Result = true;
	if (IsEndPoint == true){
		switch (this.ShowEnd){
			case 0: Result = true; break;
			case 1: Result = false; break;
			case 2: Result = (this.CurrVal != 0); break;
		}
	}
	else{
		switch (this.ShowDuring){
			case 0: Result = true; break;
			case 1: Result = false; break;
			case 2: Result = (this.CurrVal != 0); break;
		}
	}
	return Result;
}
Asset.prototype.CanBeShown=AssetCanBeShown;

function Basket(AList, Active){
	this.Active = Active;
	this.Assets = new Array();
	if (AList.length > 0){
		for (var i=0; i<AList.length; i++){
			this.Assets[i] = new Asset(i, AList[i][0], AList[i][1], AList[i][2], AList[i][3], AList[i][4], A[i][5], A[i][6], this);
		}
	}
}

function BasketGetEffectiveOperand(Trans){
//The "effective operand" is the operand converted to the right decimal place level (so an operand of 
//5, which is to act on an asset with 2dps, should be converted to 500). This is especially difficult 
//when the operand is the value of another asset, since that may have its own dp setting, and the two 
//settings must be harmonized
	var Operand = 0;
	switch(Trans[2]){
//First, a fixed value (this should already be specified at the right dp level)
		case 0: Operand = Trans[3]; break;
//Second, a random value; again, this should be specified at the right dp level already)
		case 1: Operand = GetRand(Trans[3], Trans[4]); break;
//Finally, the problem case: the value of another asset. In this case, we need to find out the dp 
//settings of both the source and target asset
//First get the real value of the source asset (so 500 for an asset with 2dp would be 5)
		case 2: Operand = this.Assets[Trans[5]].GetCurrValFloat(); 
//Now multiply this up according to the dp setting of the target asset (so 5 operating on a target asset
//with dp2 would become 500)
			for (var i=0; i<this.Assets[Trans[0]].DecPlace; i++){Operand *= 10;}
			break;
	}
	return Operand;
}
Basket.prototype.GetEffectiveOperand=BasketGetEffectiveOperand;

function BasketReportCurrState(){
	if (this.Assets.length < 1){return '';}
	var Result = '';
	for (var i=0; i<this.Assets.length; i++){
		if (this.Assets[i].CanBeShown()==true){
			Result += '<tr><td style="text-align: right;">' + this.Assets[i].Name + ' </td>';
			Result += '<td style="text-align: left;"> '
			if (this.Assets[i].ShowCount==true){
				Result += '&nbsp;:&nbsp;' + this.Assets[i].GetCurrValString();
			}
			Result += ' </td></tr>';
		}
	}
	if (Result.length > 0){
		Result = '<table class="AssetTable"><tr><th colspan="2">' + strYouHave + '</th></tr>' + Result + '</table>';
	}
	return Result;
}
Basket.prototype.ReportCurrState=BasketReportCurrState;

function BasketCloneSelf(Copy, Active){
	Copy = new Basket(A, false);
	Copy.Active = Active;
	for (var i=0; i<this.Assets.length; i++){
		Copy.Assets[i].CurrVal = this.Assets[i].CurrVal;
	}
	return Copy;
}
Basket.prototype.CloneSelf=BasketCloneSelf;

function BAssetMeetsRequirement(ANum, ReqType, Req){
	return this.Assets[ANum].MeetsRequirement(ReqType, Req);
}
Basket.prototype.AssetMeetsRequirement=BAssetMeetsRequirement;

function BAssetPerformTransaction(ANum, OpType, Operand){
	this.Assets[ANum].PerformTransaction(OpType, Operand);
}
Basket.prototype.PerformTransaction=BAssetPerformTransaction;

function BGetAssetValByName(AssetName){
	var Result = 0;
	for (var i=0; i<this.Assets.length; i++){
		if (this.Assets[i].Name == AssetName){
			Result = this.Assets[i].CurrVal;
		}
	}
	return Result;
}
Basket.prototype.GetAssetValByName=BGetAssetValByName;

//VARIABLES AND INTERFACE STRINGS

var CurrBasket;
var TempBasket;
var CurrNode=0;
var strYouHave='You have: ';
var strLinkCaption='Go!';
var strFinishCaption='Go!';
var strDefaultRefusalMessage='Sorry! You can\'t do that.';
var strTimesUp = 'Your time is over!';
var strBookmarkExplanation = '';
var strExerciseComplete = '';
var ShowImpossibleLinks=true;
var StartTime = (new Date()).toLocaleString();
var HPNStartTime = (new Date()).getTime();
var SubmissionTimeout = 30000;
var FollowingTrack = false;
var CurrTime;
var Started=false;

var IsEndPoint = false;
var Finished = false; //for compatibility with hotpot 6
var TimeOver = false;

function TransactionList(NNum, LNum){
	this.List = new Array();
	var i;
	for (i=0; i<N[NNum][4].length; i++){this.List[this.List.length] = N[NNum][4][i];}
	for (i=0; i<N[NNum][3][LNum][2].length; i++){this.List[this.List.length] = N[NNum][3][LNum][2][i];}
	for (i=0; i<N[N[NNum][3][LNum][0]][2].length; i++){this.List[this.List.length] = N[N[NNum][3][LNum][0]][2][i];}
}

function TestTransactions(NNum, LNum){
	var T = new TransactionList(NNum, LNum);
	var Result = '';
//Create a clone of the current asset basket to operate on
	var B = CurrBasket.CloneSelf(B, false);

//For each transaction
	for (var i=0; i<T.List.length; i++){
//Test the requirement
		if (B.AssetMeetsRequirement(T.List[i][0], T.List[i][7], T.List[i][6]) == true){
//If it succeeds, do the transaction
			B.PerformTransaction(T.List[i][0], T.List[i][1], B.GetEffectiveOperand(T.List[i]));
		}
		else{
//If it fails, check the refusal message
			if (T.List[i][8].length > 0){
				return T.List[i][8];
			}
//If no refusal message, return a string with spaces, otherwise return refusal message
			else{
				return strDefaultRefusalMessage;
			}
		}
	}
//If all have passed, return an empty string
	return '';
}

function StartExercise(){
	CurrBasket = new Basket(A, true);

	ParseSearch();
	CurrTime = new Date();
	ShowCurrNode();

	Started = true;
}

function StartUp(){

	if (document.location.search.indexOf('___') > -1){
		StartExercise();
	}
}

function Restart(){
	var d = document.location;
	d.search = '';
	document.location = d;
}

//CODE FOR HANDLING UNDO FUNCTIONALITY AND TRACKING NODE SEQUENCE
function HNode(NNum, LNum, Bask){
	this.NNum = NNum; //Number of the node
	this.LNum = LNum; //Number of the link selected to leave the node
	this.Basket = Bask.CloneSelf(A, false); //Copy of current basket of assets
//	this.EntryTime = CurrTime.getTime() - HPNStartTime; //Stores time of entry to this node, offset by start time, in milliseconds
	this.EntryTime = CurrTime.getTime(); //Stores absolute time of entry to this node
	this.EntryTimeString = CurrTime.toLocaleString();
	var D = new Date();
//	this.ExitTime = D.getTime() - HPNStartTime; //Stores the time of exit from this node
	this.ExitTime = D.getTime(); //Stores the absolute time of exit from this node

	this.ExitTimeString = D.toLocaleString(); //Stores the time in human-readable format
}

function HNodeReportSelf(AddTime){
	var S = this.NNum + ':' + this.LNum;
	if (AddTime == true){
		S += ':' + this.EntryTime;
	}
	return S;
}
HNode.prototype.ReportSelf=HNodeReportSelf;

//Object containing the list of tracking node objects
function HNodeList(){
	this.Nodes = new Array();
	var D = new Date();
	this.StartTime = D.getTime(); // Stores the entry time of the exercise; =entry time to node 0
	this.StartTimeString = D.toLocaleString();
}

function HNodeListReportAsSearch(IncludeTime){
	var S = '___t;';
	if (this.Nodes.length > 0){
		S += this.Nodes[0].ReportSelf(IncludeTime);
		for (var i=1; i<this.Nodes.length; i++){
			S += ',' + this.Nodes[i].ReportSelf(IncludeTime);
		}
	}
	return S;
}
HNodeList.prototype.ReportAsSearch=HNodeListReportAsSearch;

var H = new HNodeList(); //array of HNode elements

function Undo(){
	if (H.Nodes.length < 1){
		return;
	}
	var LastNode = H.Nodes.pop();
	CurrNode = LastNode.NNum;
	CurrBasket = LastNode.Basket.CloneSelf(A, true);
	ShowCurrNode();
}

//CODE FOR HANDLING URL ENCODING OF STATE

function ParseSearch(){
	if (document.location.search.length < 1){return;}
//First, get the part of the search string we're interested in
	var StateString = document.location.search.substring(document.location.search.lastIndexOf('___'), document.location.search.length);
	if (StateString.length > 0){
		ParseStateString(StateString);
	}
}

function ParseStateString(StateString){
	var S = StateString.split(';');
//S[0] tells us this is a bookmark (b), a scorm suspend state(s), or a track (t)
	if (S.length > 0){
		if (S[0] == '___b'){
//It's a bookmark
			ShowMessage(strBookmarkExplanation);
		}
		if (S[0] == '___t'){
//It's tracking data
			ParseTrack(S[1]);
			return;
		}
	}
//S[1] is the current node
	if (S.length > 1){
		if (S[1].length > 0){
			var CN=parseInt(S[1]);
			if ((CN>-1)&&(CN<N.length)){
				CurrNode = CN;
			}
		}
	}
	if (S.length > 2){
		if (S[2].length > 0){
			var AA=S[2].split(',');
			if (AA.length > 0){
				for (var i=0; i<AA.length; i++){
					var Val = parseInt(AA[i]);
					if ((i<A.length)&&(Val != NaN)){
						CurrBasket.Assets[i].CurrVal = Val;
					}
				}
			}
		}
	}

}

var Footprints = new Array();

function ParseTrack(Track){
	if (Track.length < 3){
		return;
	}

	var Steps = Track.split(',');
	if (Steps.length < 2){
		return;
	}
//We have valid track data, so the exercise can be displayed accordingly
	FollowingTrack = true;
	var NNum = 0;
	var LNum = 0;
	var T = 0;
	for (var i=0; i<Steps.length; i++){
		var Step = Steps[i].split(':');
		NNum = parseInt(Step[0]);
		if (NNum > -1){
			LNum = parseInt(Step[1]);
			if (LNum > -1){
				if (Step.length > 2){
					T = parseInt(Step[2]);
				}
				Footprints.push(new Array(NNum, LNum, T));
			}
		}
	}
}

function CreateBookmark(Prefix){
	var S = '___' + Prefix + ';' + CurrNode + ';';
	if (CurrBasket.Assets.length > 0){
		S += CurrBasket.Assets[0].CurrVal;
		for (var i=1; i<CurrBasket.Assets.length; i++){
			S += ',' + CurrBasket.Assets[i].CurrVal;
		}
	}

	return S;
}

function SetBookmark(){
	if (Started == false){return;}
	var Temp = document.location.search;
	if (Temp.length < 1){
		Temp = '?';
	}
	else{
		Temp += '&';
	}
	document.location.search = Temp + CreateBookmark('b');
}

function MillisecondsToTimeReadout(MS){
	var DT = new Date(MS);
	return DT.getHours() + ':' + DT.getMinutes() + ':' + DT.getSeconds() + ':' + DT.getMilliseconds();
}

function ShowCurrNode(){
	var DPT = N[CurrNode][0];
	if ((FollowingTrack==true)&&(Footprints.length > 0)){
		if (Footprints[0][2] > 0){
			DPT += ' (' + MillisecondsToTimeReadout(Footprints[0][2]) + ')';
		}
	}
	document.getElementById('DPTitle').innerHTML = DPT;
	document.getElementById('DPContentsDiv').innerHTML = N[CurrNode][1];
	var Links = '';
	var Refusal = '';
	var ValidLinks = 0;
	for (var LNum=0; LNum<N[CurrNode][3].length; LNum++){
		if ((FollowingTrack==true)&&(Footprints.length > 0)){
//We're following a track, so we only want to make a working link for the correct item
			if (LNum == Footprints[0][1]){
				Links += MakeLink(CurrNode, LNum);
				ValidLinks++;
			}
			else{
				Links += MakeDummyLink(CurrNode, LNum);
			}

		}
		else{
			Refusal = TestTransactions(CurrNode, LNum);
			if (Refusal.length > 0){
				if (N[CurrNode][3][LNum][4] < 1){
					N[CurrNode][3][LNum][3] = Refusal;
					Links += MakeRefusalLink(CurrNode, LNum);
				}
			}
			else{
				Links += MakeLink(CurrNode, LNum);
				ValidLinks++;
			}
		}
	}
	if (Links.length > 0){
		Links = '<table class="LinkTable">' + Links + '</table>';
	}
//Next line added for 2.2.0.3 to hide final assets when retreating from an end point.
	IsEndPoint = false;
	if (ValidLinks < 1){
		IsEndPoint = true;
		Finished = true;
		if (document.getElementById('store') != null){
			Links = '<table class="LinkTable">' + MakeEndLink() + '</table>';
		}
		else{
			if (document.getElementById('UndoButton') == null){
				Links = '<table class="LinkTable"><tr><td>' + strExerciseComplete + '</td></tr></table>';
			}
		}

	}
	document.getElementById('LinkListDiv').innerHTML = Links;

//Show assets now -- endpoint issue may affect which are shown
	var AssetOutput = CurrBasket.ReportCurrState();
	if (AssetOutput.length > 0){
		document.getElementById('AssetsDiv').innerHTML = AssetOutput;
		document.getElementById('AssetDisplay').style.display = 'block';
	}
	else{
		document.getElementById('AssetsDiv').innerHTML = '';
		document.getElementById('AssetDisplay').style.display = 'none';
	}

//Remove the last footprint from the track
	if (Footprints.length > 0){Footprints.shift();}

	if ((IsEndPoint==true)&&(document.getElementById('UndoButton') == null)){
//Record current state in the history array
		H.Nodes.push(new HNode(CurrNode, LNum, CurrBasket));

//Reset the current time
		CurrTime = new Date();
		setTimeout('Finish()', SubmissionTimeout);
	}
}

function MakeFunctionButton(Caption, Action){
	var Result = '<button class="FuncButton" onclick="' + Action + '">' + Caption + '</button>';
	return Result;
}

function MakeRefusalLink(NNum, LNum){
	var Result = '<tr><td>';
	Result += MakeFunctionButton(strLinkCaption, 'ShowMessage(N[' + NNum + '][3][' + LNum + '][3])');
	Result += '</td>';
	Result += '<td>' + N[NNum][3][LNum][1] + '</td></tr>';
	return Result;
}

function MakeLink(NNum, LNum){
	var Result = '<tr><td>';
	Result += MakeFunctionButton(strLinkCaption, 'FollowLink(' + LNum + ')');
	Result += '</td>';
	Result += '<td>' + N[NNum][3][LNum][1] + '</td></tr>';
	return Result;
}

function MakeDummyLink(NNum, LNum){
	var Result = '<tr><td style="text-align: right;">&nbsp;&#x25cf;&nbsp;</td>';
	Result += '<td>' + N[NNum][3][LNum][1] + '</td></tr>';
	return Result;
}

function MakeEndLink(){
	var Result = '<tr><td>';
	Result += MakeFunctionButton(strFinishCaption, 'Finish()');
	Result += '</td>';
	Result += '<td>' + strExerciseComplete + '</td></tr>';
	return Result;
}

function FollowLink(LNum){

//Record current state in the history array
	H.Nodes.push(new HNode(CurrNode, LNum, CurrBasket));

//Reset the current time
	CurrTime = new Date();

	var T = new TransactionList(CurrNode, LNum);
//For each transaction
	for (var i=0; i<T.List.length; i++){
//Do the transaction
		CurrBasket.PerformTransaction(T.List[i][0], T.List[i][1], CurrBasket.GetEffectiveOperand(T.List[i]));
	}
//Now change the node
	CurrNode = N[CurrNode][3][LNum][0];
	ShowCurrNode();

}



//HOTPOTNET FUNCTIONS
function Finish(){
//If there's a form, fill it out and submit it
	try{
		var F = document.getElementById('store');
		if (F != null){
			F.starttime.value = HPNStartTime;
			F.endtime.value = (new Date()).getTime();
			F.mark.value = CurrBasket.GetAssetValByName('Score'); //if an asset called "Score" exists, this value will be submitted as the mark
			var Temp = '<?xml version="1.0"?><hpnetresult><fields>';
			Temp += '<field><fieldname>endbookmark</fieldname><fieldtype>url-search</fieldtype><fieldlabel>Click here to see the final position in the maze</fieldlabel><fieldlabelid>QuandaryViewFinalPosition</fieldlabelid><fielddata>' + CreateBookmark('b') + '</fielddata></field>';
			Temp += '<field><fieldname>track</fieldname><fieldtype>url-search</fieldtype><fieldlabel>Click here to track the student through the maze.</fieldlabel><fieldlabelid>QuandaryViewTrack</fieldlabelid><fielddata>' + H.ReportAsSearch(false) + '</fielddata></field>';
			Temp += '<field><fieldname>timedtrack</fieldname><fieldtype>url-search</fieldtype><fieldlabelid>QuandaryViewTimedTrack</fieldlabelid><fieldlabel>Click here to track the student through the maze with timing data.</fieldlabel><fielddata>' + H.ReportAsSearch(true) + '</fielddata></field>';
			Temp += '</fields></hpnetresult>';
			F.detail.value = Temp;
			F.submit();

		}
	}
	catch(er){
		return;
	}
}

//UTILITY FUNCTIONS

function GetScrollTop(){
	if (document.documentElement && document.documentElement.scrollTop){
		return document.documentElement.scrollTop;
	}
	else{
		if (document.body){
 			return document.body.scrollTop;
		}
		else{
			return window.pageYOffset;
		}
	}
}

function GetViewportHeight(){
	if (window.innerHeight){
		return window.innerHeight;
	}
	else{
		return document.getElementsByTagName('body')[0].clientHeight;
	}
}

function TopSettingWithScrollOffset(TopPercent){
	var T = Math.floor(GetViewportHeight() * (TopPercent/100));
	return GetScrollTop() + T; 
}

function GetRand(Lower, Upper){
	var Rng = Upper-Lower;
	return (Math.round(Math.random()*Rng)) + Lower;
}

var A = new Array();


var N = new Array();
N[0] = new Array();
N[0][0] = 'Let\'s begin!';
N[0][1] = 'You need to decide your plans/dreams for the future. Choose a dream from below, and see what happens!';
N[0][2] = new Array();

N[0][3] = new Array();
N[0][3][0] = new Array();
N[0][3][0][0] = 1;
N[0][3][0][1] = 'I hope to be an astronaut.';
N[0][3][0][2] = new Array();

N[0][3][0][3] = '';
N[0][3][0][4] = 0;

N[0][3][1] = new Array();
N[0][3][1][0] = 6;
N[0][3][1][1] = 'I believe I will be a doctor.';
N[0][3][1][2] = new Array();

N[0][3][1][3] = '';
N[0][3][1][4] = 0;

N[0][3][2] = new Array();
N[0][3][2][0] = 10;
N[0][3][2][1] = 'I\'ll definitely be a painter.';
N[0][3][2][2] = new Array();

N[0][3][2][3] = '';
N[0][3][2][4] = 0;


N[0][4] = new Array();


N[1] = new Array();
N[1][0] = 'I hope to be an astronaut.';
N[1][1] = 'So, you want to be an astronaut. You need to work hard. Study maths and physics, and take care of your health. What will you do now?';
N[1][2] = new Array();

N[1][3] = new Array();
N[1][3][0] = new Array();
N[1][3][0][0] = 2;
N[1][3][0][1] = 'Study maths and physics.';
N[1][3][0][2] = new Array();

N[1][3][0][3] = '';
N[1][3][0][4] = 0;

N[1][3][1] = new Array();
N[1][3][1][0] = 4;
N[1][3][1][1] = 'Watch TV and be lazy';
N[1][3][1][2] = new Array();

N[1][3][1][3] = '';
N[1][3][1][4] = 0;


N[1][4] = new Array();


N[2] = new Array();
N[2][0] = 'Study maths and physics.';
N[2][1] = 'You get better in maths and physics, but you need to be strong and healthy to be an astronaut. What will you do now?';
N[2][2] = new Array();

N[2][3] = new Array();
N[2][3][0] = new Array();
N[2][3][0][0] = 3;
N[2][3][0][1] = 'Eat healthy and do sports.';
N[2][3][0][2] = new Array();

N[2][3][0][3] = '';
N[2][3][0][4] = 0;

N[2][3][1] = new Array();
N[2][3][1][0] = 5;
N[2][3][1][1] = 'Eat a lot of hamburgers and fried potatoes. Drink coke...';
N[2][3][1][2] = new Array();

N[2][3][1][3] = '';
N[2][3][1][4] = 0;


N[2][4] = new Array();


N[3] = new Array();
N[3][0] = 'Eat healthy and do sports.';
N[3][1] = 'You take care of your health, and you also study more! Congratulations, you reached your dream!';
N[3][2] = new Array();

N[3][3] = new Array();

N[3][4] = new Array();


N[4] = new Array();
N[4][0] = 'Watch TV and be lazy';
N[4][1] = 'I\'m sorry, you need to be hard-working to be an astronaut. You failed!';
N[4][2] = new Array();

N[4][3] = new Array();

N[4][4] = new Array();


N[5] = new Array();
N[5][0] = 'Eat a lot of hamburgers and fried potatoes. Drink coke...';
N[5][1] = 'You will get fat! Astronauts need to be healthy because they work in the space. You failed!';
N[5][2] = new Array();

N[5][3] = new Array();

N[5][4] = new Array();


N[6] = new Array();
N[6][0] = 'I believe I will be a doctor.';
N[6][1] = 'You need to study biology, chemistry, physichs and maths to be a doctor. You need to study a lot! What will you do now?';
N[6][2] = new Array();

N[6][3] = new Array();
N[6][3][0] = new Array();
N[6][3][0][0] = 7;
N[6][3][0][1] = 'Study more for my exams';
N[6][3][0][2] = new Array();

N[6][3][0][3] = '';
N[6][3][0][4] = 0;

N[6][3][1] = new Array();
N[6][3][1][0] = 8;
N[6][3][1][1] = 'Play computer games all day, never study.';
N[6][3][1][2] = new Array();

N[6][3][1][3] = '';
N[6][3][1][4] = 0;

N[6][3][2] = new Array();
N[6][3][2][0] = 10;
N[6][3][2][1] = 'I\'ll definitely be an painter.';
N[6][3][2][2] = new Array();

N[6][3][2][3] = '';
N[6][3][2][4] = 0;


N[6][4] = new Array();


N[7] = new Array();
N[7][0] = 'Study more for my exams';
N[7][1] = 'Congratulations! You are a hard-working student. You definitely will be a doctor some day!';
N[7][2] = new Array();

N[7][3] = new Array();

N[7][4] = new Array();


N[8] = new Array();
N[8][0] = 'Play computer games all day, never study.';
N[8][1] = 'Sorry! Doctors are really hard working. You failed! You won\'t be a doctor.';
N[8][2] = new Array();

N[8][3] = new Array();

N[8][4] = new Array();


N[9] = new Array();
N[9][0] = 'Study a little bit and get mediocre grades.';
N[9][1] = 'I\'m sorry, you need to get better grades to be a doctor. You failed.';
N[9][2] = new Array();

N[9][3] = new Array();

N[9][4] = new Array();


N[10] = new Array();
N[10][0] = 'I\'ll definitely be a painter.';
N[10][1] = 'You need to practice more painting. You need to draw a lot, be creative and enjoy painting. What will you do now?';
N[10][2] = new Array();

N[10][3] = new Array();
N[10][3][0] = new Array();
N[10][3][0][0] = 11;
N[10][3][0][1] = 'Draw, paint, and create something while drinking coffee all day.';
N[10][3][0][2] = new Array();

N[10][3][0][3] = '';
N[10][3][0][4] = 0;

N[10][3][1] = new Array();
N[10][3][1][0] = 14;
N[10][3][1][1] = 'No, I only will tell people that I will be a painter and do nothing.';
N[10][3][1][2] = new Array();

N[10][3][1][3] = '';
N[10][3][1][4] = 0;


N[10][4] = new Array();


N[11] = new Array();
N[11][0] = 'Draw, paint, and create something while drinking coffee all day.';
N[11][1] = 'Great! You\'re working hard! Now you need to share your work with the world!';
N[11][2] = new Array();

N[11][3] = new Array();
N[11][3][0] = new Array();
N[11][3][0][0] = 12;
N[11][3][0][1] = 'No, they are terrible! I\'m shy, I won\'t show them to other people.';
N[11][3][0][2] = new Array();

N[11][3][0][3] = '';
N[11][3][0][4] = 0;

N[11][3][1] = new Array();
N[11][3][1][0] = 13;
N[11][3][1][1] = 'Yes, I\'m excited! I\'ll show them. Will people like my work?';
N[11][3][1][2] = new Array();

N[11][3][1][3] = '';
N[11][3][1][4] = 0;


N[11][4] = new Array();


N[12] = new Array();
N[12][0] = 'No, they are terrible! I\'m shy, I won\'t show them to other people.';
N[12][1] = 'I\'m sorry, people need to see your work to pay you. You need to be more open, you failed!';
N[12][2] = new Array();

N[12][3] = new Array();

N[12][4] = new Array();


N[13] = new Array();
N[13][0] = 'Yes, I\'m excited! I\'ll show them. Will people like my work?';
N[13][1] = 'Of course! You are unique, and I\'m sure there will be some people who like your work. Great job! You did it!';
N[13][2] = new Array();

N[13][3] = new Array();

N[13][4] = new Array();


N[14] = new Array();
N[14][0] = 'No, I only will tell people that I will be a painter and do nothing.';
N[14][1] = 'Sorry, you need to work hard for your dreams. You failed...';
N[14][2] = new Array();

N[14][3] = new Array();

N[14][4] = new Array();






//-->

//]]>

</script>

</head>

<body onload="StartUp()" >

<!-- BeginTopNavButtons -->


<div class="NavButtonBar" id="TopNavBar">


<button class="NavButton" onclick="history.back(); return false;">&lt;=</button>



<button class="NavButton" onclick="location='index.html'; return false;"> Index </button>




</div>



<!-- EndTopNavButtons -->

<div class="Titles">
	<h2 class="ExerciseTitle">Lesson 4 - GAME!</h2>



</div>

<div class="DecisionPoint">


<div class="ControlButtons">

<button class="FuncButton" onclick="SetBookmark()">Bookmark</button>

<button class="FuncButton" onclick="Restart()">Restart</button>



</div>

	<h3 id="DPTitle" class="DecisionPointTitle">&#160;</h3>

<table class="DPTable"><tr>
<td>

	<div id="DPContentsDiv" class="DecisionPointText">

		<div class="Instructions">
		
		</div>

		<div class="Instructions">
		
		</div>

	</div>

	<div id="LinkListDiv" class="LinkList">

		<div style="text-align: center">
<button class="FuncButton" onclick="StartExercise()">Start</button>
		</div>
	</div>

</td>
<td id="AssetDisplay">
	<div id="AssetsDiv" class="Assets">

	</div>
</td></tr></table>
</div>


<div class="Feedback" id="FeedbackDiv">
<div class="FeedbackText" id="FeedbackContent"></div>
<button id="FeedbackOKButton" class="FuncButton" onclick="HideFeedback(); return false;">&nbsp;OK&nbsp;</button>
</div>

<!-- BeginBottomNavButtons -->


<div class="NavButtonBar" id="BottomNavBar">


<button class="NavButton" onclick="history.back(); return false;">&lt;=</button>



<button class="NavButton" onclick="location=''; return false;"> Index </button>



<button class="NavButton" onclick="location=''; return false;">=&gt;</button>


</div>



<!-- EndBottomNavButtons -->

<!-- BeginSubmissionForm -->

<!-- EndSubmissionForm -->


</body>
</html>
